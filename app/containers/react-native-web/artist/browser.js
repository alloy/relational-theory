/*
 * It doesn’t look like ReactNativeWeb supports server-side-rendering + client-side rehydration out-of-the-box. The
 * styles generated by the two sides differ from each other. (I suppose it’s agnostic vs vendor specifc CSS prefixes?)
 *
 *   Warning: React attempted to reuse markup in a container but the checksum was invalid. This generally means that you
 *   are using server rendering and the markup generated on the server was not what the client was expecting. React
 *   injected new markup to compensate which works but you have lost many of the benefits of server rendering. Instead,
 *   figure out why the markup being generated is different on the client or server:
 *   (client) <div style="-webkit-align-items:stretch;
 *   (server) <div style="-webkit-flex-shrink:0;-ms-fl
 */

import React from 'react'
import ReactDOM from 'react-dom'
import IsomorphicRelay from 'isomorphic-relay'

import { artsyRelayEnvironment } from '../../../relay/config'
import { ArtistQueryConfig } from '../../../relay/root_queries'

import Artist from './index'

const rootElement = document.getElementById('root')

const environment = artsyRelayEnvironment()
IsomorphicRelay.injectPreparedData(environment, window.ARTIST_PROPS)

IsomorphicRelay.prepareInitialRender({
  Container: Artist,
  queryConfig: new ArtistQueryConfig({ artistID: window.ARTIST_ID }),
  environment,
}).then(props => {
  ReactDOM.render(<IsomorphicRelay.Renderer {...props} />, rootElement)
})
